from bokeh.plotting import figure, show
from bokeh.models import Span, BoxAnnotation
from bokeh.colors import RGB
import pyslow5

import argparse

parser = argparse.ArgumentParser()
   
parser.add_argument('-o', '--output', action='store_true', help="shows output")
parser.add_argument('-s', '--slow5', required='True', help="shows output")
parser.add_argument('-r', '--read', required='True', help="shows output")

args = parser.parse_args()
print(f'signal file: {args.slow5}')
print(f'read: {args.read}')

read_id = "7a863656-a07d-425b-a3ca-7409a7c14bc1"
start_index=0
end_index=10000
plot_length = end_index - start_index

plot_title=f'{read_id}:{start_index}-{end_index}'
# create a new plot with a title and axis labels
p = figure(title=plot_title, 
	x_axis_label='signal index', 
	y_axis_label='signal value', 
	sizing_mode="stretch_width",
    height=250,
    output_backend="webgl",
    x_range=(3000, 4000))


# prepare some data
x = [1, 2, 3, 4, 5]
y = [6, 7, 2, 4, 5]

base_color_map = {'A':'limegreen','C':'blue','T':'red','G':'orange'}


stride=5
trim_start=2290
moves
bases="TACTTCGTTCAGTTACGTATTGCTCCTATAATTGAAGACACTTGTTCTTATACTGCTTTAAGGTATAAAGGAAGAAAAAAAACAGATAATGGCAAATGTTGGTGAAGCCGGGCATGGTGGCAGCCTGTAATTCCAGAACTTAGGGAGGCTGAGGTGGGCAGATCACTTGAGGCCAGGAGTATGAGACCAGCCTGGGCAACATGGTAAAATCCCACCACTACAGAAAAATATAAAAATTAGCCAGGCATGGTGGCGTACACCTGTAATTTTCAGCTACCCAGGAGGCTGAGATGAGAGAATCACTTGTGCCTGGGAGGTCACGGCTGCAGTGAACTGTGATGGCATCATTGCACTGCAGCCTGAGAGACAGAGCAAGCCCCTATCTAGAAAAAAAAAATGTCAGTGAAGATGTGGAGGAATTGGAACCCACATACATTACTGGTGGGAACATAAAATTGTGTAACCATTTTGTTTGGGTATTTTCTTTTCTTGTCATTTAGTGGATTTTTAAAAAATCAAGACGGGGTTTCACTATCTTGCCAGGCTGGTCTTGAATTCCTGAGCTCAAGCCATCCTCCTAGCTGAGCCTCCTGAGTAGCTGGGATTACAGGTGTGAGCCATTGCACCCAACTGAGTATAGCCACGTTAGAAAACATTCTGGCAGTTTCTCAAAAGGCTAAATGTACAGTCATCCTATAATGCAACAATTTCACTCCTAGGCATATGTCCAGAAAAATAAAAATATATG"

# open file
s5 = pyslow5.Open(args.slow5,'r')
read = s5.get_read(read_id, pA=True, aux=["read_number", "start_mux"])
if read is not None:
    print("read_id:", read['read_id'])
    print("len_raw_signal:", read['len_raw_signal'])
    # x = list(range(1,read['len_raw_signal']+1))
    # y = read['signal']
    x = list(range(start_index,end_index))
    y = read['signal'][start_index:end_index]

# draw moves
vlines = []
move_count = 0
base_count = 0
previous_location = -1
for i in moves:
	location = trim_start+(move_count*stride)
	if(i == '1'):
		if(previous_location > 0):
			base = bases[base_count]
			base_box = BoxAnnotation(left=previous_location, right=location, fill_alpha=0.2, fill_color=base_color_map[base])
			p.add_layout(base_box)
			base_count = base_count + 1
			vline = Span(location=location, dimension='height', line_color='cyan', line_width=0.5)
			vlines.append(vline)
		previous_location = location
	move_count = move_count + 1

p.renderers.extend(vlines)

# add a line renderer with legend and line thickness to the plot
p.line(x, y, legend_label="Temp.", line_width=2)

# show the results
show(p)